{"version":3,"sources":["webpack:///./src/components/AskInfo.js","webpack:///./src/pages/gallery.module.scss","webpack:///./src/components/askInfo.module.scss","webpack:///./src/pages/gallery.js"],"names":["AskInfo","question","button","link","bgLight","btGreen","className","styles","askInfo","href","target","rel","module","exports","GalleryPage","edges","data","allMarkdownRemark","title","map","edge","key","node","frontmatter","path","to","as","project","alt","src","image","publicURL","info","submitted_by"],"mappings":"2FAAA,8CA8BeA,IA3BC,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAUC,EAAb,EAAaA,OAAQC,EAArB,EAAqBA,KAAMC,EAA3B,EAA2BA,QAASC,EAApC,EAAoCA,QAApC,OACd,yBACEC,UAAS,yDACPC,IAAOC,QADA,KAELJ,EAAU,WAAa,KAE3B,yBAAKE,UAAU,aACb,yBAAKA,UAAU,0BACb,yBAAKA,UAAU,YACb,wBAAIA,UAAU,gBAAgBL,IAEhC,yBAAKK,UAAU,YACb,uBAAGG,KAAMN,EAAMO,OAAO,SAASC,IAAI,uBACjC,4BACEL,UAAS,+BACPD,EAAU,YAAc,KAGzBH,U,qBCpBfU,EAAOC,QAAU,CAAC,QAAU,iCAAiC,KAAO,gC,qBCApED,EAAOC,QAAU,CAAC,QAAU,oC,kCCD5B,qGA8EeC,UAvEK,SAAC,GAAc,IAE3BC,EAF0B,EAAXC,KACbC,kBACwBF,MAEhC,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKG,MAAM,YACX,yBAAKZ,UAAU,aACb,yBAAKA,UAAU,mBACb,yBAAKA,UAAU,mBACb,6BACE,wBAAIA,UAAU,OAAd,WACA,wBAAIA,UAAU,SACZ,6FAOV,kBAAC,IAAD,CACEL,SAAS,sDACTC,OAAO,UACPC,KAAK,sCACLC,SAAO,EACPC,SAAO,IAGT,yBAAKC,UAAU,2BACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,OACZS,EAAMI,KAAI,SAAAC,GAAI,OACb,yBACEd,UAAU,+BACVe,IAAKD,EAAKE,KAAKC,YAAYC,MAE3B,kBAAC,OAAD,CAAMC,GAAIL,EAAKE,KAAKC,YAAYC,KAAME,GAAG,OACvC,yBAAKpB,UAAWC,IAAOoB,SACrB,yBACEC,IAAKR,EAAKE,KAAKC,YAAYL,MAC3BZ,UAAU,YACVuB,IAAKT,EAAKE,KAAKC,YAAYO,MAAMC,YAEnC,yBAAKzB,UAAcC,IAAOyB,KAAZ,qBACZ,4BAAKZ,EAAKE,KAAKC,YAAYL,OAC3B,uBAAGZ,UAAU,SACVc,EAAKE,KAAKC,YAAYU,wBAgBzC,kBAAC,IAAD,CACEhC,SAAS,8EACTC,OAAO,aACPC,KAAK","file":"component---src-pages-gallery-js-55025e5ff5fac23d8af6.js","sourcesContent":["import React from \"react\"\nimport styles from \"./askInfo.module.scss\"\n\nconst AskInfo = ({ question, button, link, bgLight, btGreen }) => (\n  <div\n    className={`container-fluid text-center text-md-left py-3 py-md-0 ${\n      styles.askInfo\n    } ${bgLight ? \"bg-light\" : \"\"}`}\n  >\n    <div className=\"container\">\n      <div className=\"row align-items-center\">\n        <div className=\"col-sm-9\">\n          <h3 className=\"my-3 my-md-0\">{question}</h3>\n        </div>\n        <div className=\"col-sm-3\">\n          <a href={link} target=\"_blank\" rel=\"noopener noreferrer\">\n            <button\n              className={`btn btn-default btn-larger ${\n                btGreen ? \"btn-green\" : \"\"\n              }`}\n            >\n              {button}\n            </button>\n          </a>\n        </div>\n      </div>\n    </div>\n  </div>\n)\n\nexport default AskInfo\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"project\":\"gallery-module--project--3e-iK\",\"info\":\"gallery-module--info--3zqbS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"askInfo\":\"askInfo-module--ask-info--3UwTp\"};","import React from \"react\"\nimport { Link, graphql } from \"gatsby\"\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport AskInfo from \"../components/AskInfo\"\nimport styles from \"./gallery.module.scss\"\n\nconst GalleryPage = ({ data }) => {\n  const { allMarkdownRemark } = data\n  const edges = allMarkdownRemark.edges\n\n  return (\n    <Layout>\n      <SEO title=\"Gallery\" />\n      <div className=\"container\">\n        <div className=\"row main-header\">\n          <div className=\"col-12 col-sm-8\">\n            <div>\n              <h1 className=\"big\">Gallery</h1>\n              <h2 className=\"light\">\n                <p>A place to showcase the best examples of RAWGraphs in use</p>\n              </h2>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <AskInfo\n        question=\"Have you done something interesting with RAWGraphs?\"\n        button=\"submit!\"\n        link=\"https://forms.gle/WnqxUfwnE3nVt58RA\"\n        bgLight\n        btGreen\n      ></AskInfo>\n\n      <div className=\"grey-bg container-fluid\">\n        <div className=\"container\">\n          <div className=\"row\">\n            {edges.map(edge => (\n              <div\n                className=\"col-6 col-sm-4 col-md-3 mb-5\"\n                key={edge.node.frontmatter.path}\n              >\n                <Link to={edge.node.frontmatter.path} as=\"div\">\n                  <div className={styles.project}>\n                    <img\n                      alt={edge.node.frontmatter.title}\n                      className=\"img-fluid\"\n                      src={edge.node.frontmatter.image.publicURL}\n                    ></img>\n                    <div className={`${styles.info} d-none d-md-flex`}>\n                      <h2>{edge.node.frontmatter.title}</h2>\n                      <p className=\"small\">\n                        {edge.node.frontmatter.submitted_by}\n                      </p>\n                    </div>\n                  </div>\n                  {/*                  <div className=\"d-block d-md-none\">\n                    <h2>{edge.node.frontmatter.title}</h2>\n                    <p className=\"small\">\n                      {edge.node.frontmatter.submitted_by}\n                    </p>\n                  </div>*/}\n                </Link>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n      <AskInfo\n        question=\"Do you want to contribute to the project? Any general question or feedback?\"\n        button=\"contact us\"\n        link=\"mailto:hello@rawgraphs.io\"\n      ></AskInfo>\n    </Layout>\n  )\n}\n\nexport default GalleryPage\n\nexport const query = graphql`\n  query {\n    site {\n      siteMetadata {\n        learningCategories\n      }\n    }\n    allMarkdownRemark(\n      filter: { frontmatter: { layout: { eq: \"gallery_project\" } } }\n      sort: { order: DESC, fields: [frontmatter___date] }\n      limit: 1000\n    ) {\n      edges {\n        node {\n          frontmatter {\n            title\n            path\n            date\n            categories\n            submitted_by\n            image {\n              publicURL\n            }\n            tags\n          }\n          html\n          snippet\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}